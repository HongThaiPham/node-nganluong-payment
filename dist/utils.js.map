{"version":3,"sources":["../src/utils.js"],"names":["toUpperCase","pack","hashHmac","to2DigitNumber","vnPayDateFormat","createMd5Hash","urlRegExp","s","Error","data","encoding","Buffer","from","algorithm","secret","hmac","crypto","createHmac","update","digest","number","isNaN","substr","date","constructor","name","result","getFullYear","toString","getMonth","getDate","getHours","getMinutes","getSeconds","createHash"],"mappings":";;;;;;QAiBgBA,W,GAAAA,W;QAsBAC,I,GAAAA,I;QAYAC,Q,GAAAA,Q;QAYAC,c,GAAAA,c;QAiBAC,e,GAAAA,e;QAsBAC,a,GAAAA,a;;AAjGhB;;;;;;AALA;;;;AAGA;AAIA,MAAMC,SAAS,GAAG,eAAlB;QAESA,S,GAAAA,S;AAET;;;;;;;AAMO,SAASN,WAAT,CAAqBO,CAAC,GAAG,EAAzB,EAA6B;AAClC,MAAI,OAAOA,CAAP,KAAa,QAAjB,EAA2B;AACzB,UAAM,IAAIC,KAAJ,CAAU,kCAAV,CAAN;AACD;;AAED,SAAOD,CAAC,CAACP,WAAF,EAAP;AACD;AAED;;;;;;;;;;;;;;;;AAcO,SAASC,IAAT,CAAcQ,IAAd,EAAoBC,QAAQ,GAAG,KAA/B,EAAsC;AAC3C,SAAOC,MAAM,CAACC,IAAP,CAAYH,IAAZ,EAAkBC,QAAlB,CAAP;AACD;AAED;;;;;;;;;;AAQO,SAASR,QAAT,CAAkBW,SAAlB,EAA6BJ,IAA7B,EAAmCK,MAAnC,EAA2C;AAChD,QAAMC,IAAI,GAAGC,iBAAOC,UAAP,CAAkBJ,SAAlB,EAA6BC,MAA7B,CAAb;;AACAC,EAAAA,IAAI,CAACG,MAAL,CAAYT,IAAZ;AAEA,SAAOM,IAAI,CAACI,MAAL,CAAY,KAAZ,CAAP;AACD;AAED;;;;;;;AAKO,SAAShB,cAAT,CAAwBiB,MAAxB,EAAgC;AACrC,MAAIC,KAAK,CAACD,MAAD,CAAT,EAAmB;AACjB,UAAM,IAAIZ,KAAJ,CAAU,uCAAV,CAAN;AACD;;AACD,MAAI,CAACY,MAAL,EAAa;AACX,WAAO,IAAP;AACD;;AAED,SAAQ,IAAGA,MAAO,EAAX,CAAaE,MAAb,CAAoB,CAAC,CAArB,EAAwB,CAAxB,CAAP;AACD;AAED;;;;;;;;AAMO,SAASlB,eAAT,CAAyBmB,IAAzB,EAA+B;AACpC,MAAIA,IAAI,CAACC,WAAL,CAAiBC,IAAjB,KAA0B,MAA9B,EAAsC;AACpC,UAAM,IAAIjB,KAAJ,CAAU,sCAAV,CAAN;AACD;;AAED,MAAIkB,MAAM,GAAG,EAAb;AACAA,EAAAA,MAAM,IAAIH,IAAI,CAACI,WAAL,GAAmBC,QAAnB,EAAV;AACAF,EAAAA,MAAM,IAAIvB,cAAc,CAACoB,IAAI,CAACM,QAAL,KAAkB,CAAnB,CAAxB;AACAH,EAAAA,MAAM,IAAIvB,cAAc,CAACoB,IAAI,CAACO,OAAL,EAAD,CAAxB;AACAJ,EAAAA,MAAM,IAAIvB,cAAc,CAACoB,IAAI,CAACQ,QAAL,EAAD,CAAxB;AACAL,EAAAA,MAAM,IAAIvB,cAAc,CAACoB,IAAI,CAACS,UAAL,EAAD,CAAxB;AACAN,EAAAA,MAAM,IAAIvB,cAAc,CAACoB,IAAI,CAACU,UAAL,EAAD,CAAxB;AAEA,SAAOP,MAAP;AACD;AAED;;;;;;;;AAMO,SAASrB,aAAT,CAAuBI,IAAvB,EAA6B;AAClC,SAAOO,iBACJkB,UADI,CACO,KADP,EAEJhB,MAFI,CAEGT,IAFH,EAGJU,MAHI,CAGG,KAHH,CAAP;AAID","sourcesContent":["/* Â© 2018 NauStud.io\n * @author Eric Tran\n */\n/** @module utils */\n\nimport crypto from 'crypto';\n\nconst urlRegExp = /https?:\\/\\/.*/;\n\nexport { urlRegExp };\n\n/**\n * Global function to convert String to upper case, with type checking\n *\n * @param {string} s\n * @return {string} all upper case string\n */\nexport function toUpperCase(s = '') {\n  if (typeof s !== 'string') {\n    throw new Error('toUpperCase:param must be string');\n  }\n\n  return s.toUpperCase();\n}\n\n/**\n * Equivalent to PHP's `pack` function, using Node native Buffer\n * <br>\n * Note: PHP\n * <br>\n * <pre>    <code>pack('H*', data)</code></pre>\n * is equivalent to Node:\n * <br>\n * <pre>    <code>Buffer.from(data, 'hex')</code></pre>\n *\n * @param {*} data\n * @param {*} encoding\n * @return {Buffer} Buffer of data encoded with `encoding` method\n */\nexport function pack(data, encoding = 'hex') {\n  return Buffer.from(data, encoding);\n}\n\n/**\n * Equivalent to PHP's `hash_hmac` function.\n *\n * @param  {string} algorithm  hashing algorithm\n * @param  {*}      data       data string to be hashed\n * @param  {Buffer} secret     Secret key used to hash data, generated with `pack` method\n * @return {string}            digested hash\n */\nexport function hashHmac(algorithm, data, secret) {\n  const hmac = crypto.createHmac(algorithm, secret);\n  hmac.update(data);\n\n  return hmac.digest('hex');\n}\n\n/**\n * Convenient function to convert number to 2 digit number string\n * @param {*} number\n * @return {string} formatted number\n */\nexport function to2DigitNumber(number) {\n  if (isNaN(number)) {\n    throw new Error('to2DigitNumber:param must be a number');\n  }\n  if (!number) {\n    return '00';\n  }\n\n  return `0${number}`.substr(-2, 2);\n}\n\n/**\n * Convenient function to convert date to format yyyyMMddHHmmss\n *\n * @param {Date} date Date object that need to be formatted\n * @return {string} date string formatted in yyyyMMddHHmmss\n */\nexport function vnPayDateFormat(date) {\n  if (date.constructor.name !== 'Date') {\n    throw new Error('vnPayDateFormat:param must be a date');\n  }\n\n  let result = '';\n  result += date.getFullYear().toString();\n  result += to2DigitNumber(date.getMonth() + 1);\n  result += to2DigitNumber(date.getDate());\n  result += to2DigitNumber(date.getHours());\n  result += to2DigitNumber(date.getMinutes());\n  result += to2DigitNumber(date.getSeconds());\n\n  return result;\n}\n\n/**\n * Convenient function to create md5 hash from string.\n *\n * @param {*} data\n * @return {string} md5 hash\n */\nexport function createMd5Hash(data) {\n  return crypto\n    .createHash('md5')\n    .update(data)\n    .digest('hex');\n}\n"],"file":"utils.js"}